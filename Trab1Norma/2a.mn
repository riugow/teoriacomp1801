// limpa registrador
operation zera(A){
   1: if zero A then goto 0 else goto 2
   2: do dec A goto 1
}

//soma A=A+B, zerando B
operation soma(A,B){
   1: if zero B then goto 0 else goto 2
   2: do dec B goto 3
   3: do inc A goto 1
}

//subtrai B de A
operation subtrai(A,B){
   1: if zero B then goto 0 else goto 2
   2: do dec B goto 3
   3: do dec A goto 1
}

//atribui o valor de B para A
//usa K
operation atribui(A,B){
   1: do zera(A) goto 2
   2: if zero B then goto 6 else goto 3
   3: do dec B goto 4
   4: do inc K goto 5
   5: do inc A goto 2
   6: do soma(B,K) goto 0
}

// testa se A > B
test maior(A,B){
   1: do atribui(D,A) goto 2
   2: do atribui(E,B) goto 3
   3: if zero D then goto false else goto 4
   4: if zero E then goto true else goto 5
   5: do dec D goto 6
   6: do dec E goto 3
}

// testa se A == B
test igual(A,B){
   1: do atribui(D,A) goto 2
   2: do atribui(E,B) goto 3
   3: if zero D then goto 7 else goto 4
   4: if zero E then goto false else goto 5
   5: do dec D goto 6
   6: do dec E goto 3
   7: if zero E then goto true else goto false
}

//soma C vezes o valor de B, armazenando em B
//usa D, E, F
operation multiplica(B, C){
   1: do atribui(D,B) goto 2
   2: do atribui(E,C) goto 3
   3: do dec E goto 4
   4: if zero E then goto 0 else goto 5
   5: do atribui(F,D) goto 6
   6: do soma(B,F) goto 3
}

//divide o valor de A por B
// Entram A (dividendo) e B (divisor)
// Saem A (quociente) e B (resto)
// usa E e F
operation div(A,B){  
   1: if zero A then goto 0 else goto 2
   2: if zero B then goto 12 else goto 3
   3: do zera(I) goto 4
   4: do soma(I,A) goto 5
   5: do atribui(J,B) goto 6
   6: if maior(J,I) then goto 11 else goto 7
   7: do dec I goto 8
   8: do dec J goto 9
   9: if zero J then goto 10 else goto 7
  10: do inc A goto 5
  11: do atribui(B,I) goto 0
  12: do soma(B,A) goto 0
} 

//calcula a potencia O^P
//usa R
operation potencia(O,P){
   1: if cmp P 1 then goto 0 else goto 2
   2: if zero P then goto 3 else goto 5
   3: do zera(O) goto 4
   4: do inc O goto 0
   5: if zero O then goto 0 else goto 6
   6: do atribui(R,O) goto 7
   7: do dec P goto 8
   8: do multiplica(O,R) goto 9
   9: if cmp P 1 then goto 0 else goto 7
}

// decodifica a primeira coordenada do número P,
// sendo P = (2^A)*(3^B)
operation fst(A,P){
   1: do zera(A) goto 2
   2: do atribui(M,P) goto 3
   3: do zera(N) goto 4
   4: do add N 2 goto 5
   5: do div(M,N) goto 6
   6: if zero N then goto 7 else goto 0
   7: do inc A goto 4
}

// decodifica a segunda coordenada do número P,
// sendo P = (2^A)*(3^B)
operation snd(B,P){
   1: do zera(B) goto 2
   2: do atribui(M,P) goto 3
   3: do zera(N) goto 4
   4: do add N 3 goto 5
   5: do div(M,N) goto 6
   6: if zero N then goto 7 else goto 0
   7: do inc B goto 4
}

// calcula o valor codificado do par (A,B)
// sendo P = (2^A)*(3^B)
//usa G
operation pair(P,A,B){
   1: do zera(G) goto 2
   2: do add G 2 goto 3
   3: do potencia(G,A) goto 4
   4: do zera(P) goto 5
   5: do add P 3 goto 6
   6: do potencia(P,B) goto 7
   7: do multiplica(P,G) goto 0
}

main{
   1: do fst(A,X) goto 2   
   2: do snd(B,X) goto 3 
   3: do zera(MMC) goto 4
//verifica se algum elemento do par é zero
   4: if zero A then goto 5 else goto 6
   5: do atribui(MDC,B) goto 19 
   6: if zero B then goto 7 else goto 8
   7: do atribui(MDC,A) goto 19 
   8: do atribui(Z,A) goto 9
   9: do atribui(MDC,B) goto 10

// calcula o MDC de fst e snd
  10: if igual(Z,MDC) then goto 16 else goto 11
  11: if maior(Z,MDC) then goto 12 else goto 14
  12: do atribui(V,MDC) goto 13
  13: do subtrai(Z,V) goto 10
  14: do atribui(V,Z) goto 15
  15: do subtrai(MDC,V) goto 10

// calcula o MMC de fst e snd usando a fórmula:
// MMC = (fst * snd) / MDC)
  16: do atribui(MMC,A) goto 17
  17: do multiplica(MMC,B) goto 18
  18: do div(MMC,Z) goto 19
// codifica o novo par
  19: do pair(Y,MMC,MDC) goto 0
}