//zera A
operation clear(A) {
	1: if zero A then goto 0 else goto 2
	2: do dec A goto 1
}

// A = A+B, não zerando B
operation soma(A,B){
//K = variavel auxiliar para não perder B
	1: do clear(K) goto 2
	2: if zero B then goto 6 else goto 3
	3: do inc A goto 4
	4: do dec B goto 5
	5: do inc K goto 2
	6: if zero K then goto 0 else goto 7
	7: do inc B goto 8
	8: do dec K goto 6
}

// A=B, copia o valor de B para A sem alterar B
operation assign(A,B){
  1: do clear(A) goto 2
  2: do soma(A,B) goto 0
}

// A=A-B, sem alterar B
operation subt(A,B){
	1: do assign (K,B) goto 2
	2: if zero K then goto 0 else goto 3
	3: do dec A goto 4
	4: do dec K goto 2
} 

//teste se A>=B
test maiorq(A,B){
	1: if zero A then goto 5 else goto 2
	2: if zero B then goto true else goto 3
	3: do dec A goto 4
	4: do dec B goto 1
	5: if zero B then goto true else goto false
}

//A= A/B, sem alterar B
//A= Resultado, B=divisor, C=dividendo/resto, K= auxiliar para não perder B
operation div(A,B){
	1: do assign (C,A) goto 2
	2: do clear (A) goto 3
	3: do assign (K,B) goto 4
	4: do subt(C,B) goto 5
	5: do inc A goto 6
	6: if zero C then goto 0 else goto 7
	7: if maiorq(C,B) then goto 4 else goto 0
	}

//A = A*B sem alterar B
//multiplicação por somas sucessivas
operation mult(A,B){
	1: do clear (K) goto 2
	2: do clear (L) goto 3
	3: do assign (K,A) goto 4
	4: do assign (L,B) goto 5
	5: do clear (A) goto 6
	6: if zero L then goto 0 else goto 7
	7: do soma(A,K) goto 8
	8: do dec L goto 6
}

//A= A/B, sem alterar B
//A= Resultado, B=divisor, C=dividendo/resto, K= auxiliar para não perder B
operation div(A,B){
	1: do assign (C,A) goto 2
	2: do clear (A) goto 3
	3: do assign (K,B) goto 4
	4: do dec C goto 5
	5: do dec K goto 6
	6: if zero C then goto 0 else goto 7
	//if true = fim do "resto da divisão"
	7: if zero K then goto 8 else goto 4
	8: do inc A goto 3
}

// A:=A div 2 usando C (divisão inteira por 2)
operation div2(A,C){
  1: do assign(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: do inc A goto 2
}

// A divisivel_por_2 usando C (teste se multiplo de 2)
test divBy2(A,C){
  1: do assign(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 2
}

// A:=fst(B) usando C,D (extrai o primeiro componente do par)
operation fst(A,B,C,D){
  1: do clear(A) goto 2
  2: do assign(C,B) goto 3
  3: if divBy2(C,D) then goto 4 else goto 6
  4: do div2(C,D) goto 5
  5: do inc A goto 3
  6: do clear(C) goto 0
}

// A:=A div 3 usando C (divisão inteira por 3)
operation div3(A,C){
  1: do assign(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: if zero C then goto 0 else goto 7
  7: do dec C goto 8
  8: do inc A goto 2
}

// A divisivel_por_3 usando C (teste se múltiplo de 3)
test divBy3(A,C){
  1: do assign(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 8
  8: if zero C then goto false else goto 9
  9: do dec C goto 10
 10: do inc A goto 2
}

// A:=snd(B) usando C,D (extrai o segundo componente do par)
operation snd(A,B,C,D){
  1: do clear(A) goto 2
  2: do assign(C,B,D) goto 3
  3: if divBy3(C,D) then goto 4 else goto 6
  4: do div3(C,D) goto 5
  5: do inc A goto 3
  6: do clear(C) goto 0
}

//teste se A/B tem como resultado um numero inteiro
//A= Resultado, B=divisor, C=dividendo/resto, K= auxiliar para não perder B
test divByB(A,B){
	1: do assign (C,A) goto 2
	2: do clear (A) goto 3
	3: do assign (K,B) goto 4
	4: do dec C goto 5
	5: do dec K goto 6
	6: if zero C then goto 9 else goto 7
	//if true = fim do "resto da divisão"
	7: if zero K then goto 8 else goto 4
	8: do inc A goto 3
	9: if zero K then goto true else goto false
}


//teste se (A/C e B/C) tem como resultado um numero inteiro
test abDivByC(A,B,C){
	1: if divByB(A,C) then goto 2 else goto false
	2: if divByB(B,C) then goto true else goto false
}

operation mdc(A,B,C){
	//C = resultado
	1: if maiorq(A,B) then goto 2a else goto 2b
	2a: do assign(CB,B) goto 3a
	3a: do rdiv(A,CB,C) goto 4a
	4a: if zero C then goto 5a else goto 6a
	5a: do assign (C,CB) goto 0
	//se resto 0, mdc = penultimo divisor (CB)
	6a: do assign (CB,C) goto 3a
	//se resto >0, fazer nova divisão utilizando o resto
	2b: do assign(CA,A) goto 3b
	3b: do rdiv(B,CA,C) goto 4b
	4b: if zero C then goto 5b else goto 6b
	5b: do assign (C,CA) goto 0
	//se resto 0, mdc = penultimo divisor (CA)
	6b: do assign (CA,C) goto 3b
	//se resto >0, fazer nova divisão utilizando o resto
}
//calcula a potencia O^P
//usa R
operation pow(O,P){
   1: if zero P then goto 2 else goto 4
   2: do clear (O) goto 3
   3: do inc O goto 0
   4: if zero O then goto 0 else goto 5
   5: do assign (R,O) goto 6
   6: do dec P goto 7
   7: do mult (O,R) goto 8
   8: if cmp P 1 then goto 0 else goto 6
}

//calcula o valor codificado do par (A,B) e o armazena em P
//usa G
operation pair (P,A,B){
   1: do clear (G) goto 2
   2: do add G 2 goto 3
   3: do pow (G,A) goto 4
   4: do clear (P) goto 5
   5: do add P 3 goto 6
   6: do pow (P,B) goto 7
   7: do mult (P,G) goto 0
}


main{
	1: do fst(A,X,C,D) goto 2
	// extrai o primeiro componente do par  
	2: do snd(B,X,C,D) goto 3
	// extrai o segundo  componente do par
	3: do assign(CA,A) goto 4
	// CA = copia de A
	4: do assign(CB,B) goto 5
	// CB = copia de B
	5: do clear (C) goto 6
	6: do inc C goto 7
	//C = 1
	7: if abDivByC(CA,CB,C) then goto 8a else goto 8b
	//testa se A e B são divisiveis por C
	8a: do div(CA,C) goto 9a
	9a: do div(CB,C) goto 7
	8b: do inc C goto 9b
	9b: if maiorq(CA,C) then goto 10 else goto 11
	10: if maiorq(CB,C) then goto 7 else goto 11
	//testa se CA>=C e CB>=C, se false:termina de reduzir a fração
	11: do mult(CA,B) goto 12
	12: do assign(W,CA) goto 13
	//armazena mmc de A e B em W
	13: do assign(CA,A) goto 14
	// CA = copia de A
	14: do assign(CB,B) goto 15
	// CB = copia de B
	15: do clear(C) goto 16
	16: do mdc(A,B,C) goto 17
	17: do assign(Z,C) goto 18
	//armazena mdc em Z
 	18: do pair(Y,W,Z) goto 0
}
